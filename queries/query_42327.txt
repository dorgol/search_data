/*
    Name: 20230523 - FT2 iOS - [FT-1100] Import Quickstart V3 - SOL Subs - High Level Metrics
    Query ID: 42327
    Created By: Josh Seidman
    Last Updated At: 2023-06-11T07:21:32.475Z
    */
    with
users as
(
    select
        segmentation,
        application,
        experiment,
        variant,
        display_type,
        id_for_vendor,
        experiment_started_meta,
        experiment_started_meta_by_type,
        lt_defacto_id
    from `ltx-dwh-prod-processed`.`ab_test`.`raw_final_devices_and_variant` d
    where case 
        when '{{segments}}' = 'All Users' then segmentation = '01 All Users' 
        when '{{segments}}' = 'New Users' then segmentation = '02 New Users' 
        when '{{segments}}' = 'Existing Users' then segmentation = '03 Existing Users' 
        when '{{segments}}' = 'All Users Without Existing Segmentation' then segmentation in ('01 All Users','02 New Users','03 Existing Users' )
        else true end
    and  d.application = 'facetune2'
    and lower(d.experiment) like lower('[FT-1100] Import Quickstart V3')
    and display_type = 'displayed'
),

subs as (
    select
        segmentation,
        variant,
        u.id_for_vendor,
        payments.revenue_so_far,
        subscription.is_sol as sol_sub,
        subscription.subscription_source,
        subscription.subscription_duration as subscription_duration,
        subscription.subscription_cancellation_date as subscription_cancellation_date,
        subscription.current_is_in_trial_period as is_in_trial_period,
        subscription.had_trial
    from users u 
    join `ltx-dwh-prod-processed`.`subscriptions`.`subscription_to_defacto` s
        on s.application = 'facetune2'
        and s.lt_defacto_id = u.lt_defacto_id
        and original_purchase_date >= experiment_started_meta
    join `ltx-dwh-prod-processed`.`subscriptions`.`unified_subscriptions_revenue_allocation` ra
        on s.lt_subscription_id = ra.lt_subscription_id
    where subscription.subscription_source in ('first_launch', 'firstTimeIninitialFlow')
),

exports as (
    select
        segmentation,
        variant,
        u.id_for_vendor,
        count(distinct e.event_id) as num_exports,
    from users u 
    join `ltx-dwh-prod-processed`.`devices`.`unified_app_export` e
        on true
        and e.application = '{{app}}'
        and e.meta_received_at >= '{{first_day}}'
        and u.id_for_vendor = e.id_for_vendor
        and e.meta_received_at >= experiment_started_meta
    group by 1,2,3
),
retention as (
    select
        u.id_for_vendor,
        max(case when date_diff(ad.dt, date(u.experiment_started_meta), day) = 1 then true else false end) as is_day1_retained,
        max(case when date_diff(ad.dt, date(u.experiment_started_meta), day) between 1 and 7 then true else false end) as is_week0_retained,
        max(case when date_diff(ad.dt, date(u.experiment_started_meta), day) between 8 and 14 then true else false end) as is_week1_retained
    from users u 
    join `ltx-dwh-prod-processed`.`agg`.`app_device_date` ad
        on true
        and ad.app_name = '{{app}}'
        and ad.dt >= '{{first_day}}'
        and u.id_for_vendor = ad.platform_device_id
        and ad.dt >= date(experiment_started_meta)
        and cntd_foregrounds > 0
    group by 1
)

select
    u.segmentation,
    case when u.variant = 'baseline' then 'Baseline' else u.variant end as variant,
    display_type,
    count(distinct u.id_for_vendor) as num_devices,
    sum(revenue_so_far) revs,
    sum(revenue_so_far)/nullif(count(distinct u.id_for_vendor),0) as revenue_per_device_new_subs,
    
    count(distinct case when s.id_for_vendor is not null then u.id_for_vendor end)/nullif(count(distinct u.id_for_vendor),0)*100 as cvr,
    count(distinct case when s.id_for_vendor is not null and sol_sub is true then u.id_for_vendor end)/nullif(count(distinct u.id_for_vendor),0)*100 as sol_cvr,
    count(distinct case when s.id_for_vendor is not null and sol_sub is false then u.id_for_vendor end)/nullif(count(distinct u.id_for_vendor),0)*100 as non_sol_cvr,
    
    count(distinct case when s.id_for_vendor is not null and revenue_so_far > 0 then u.id_for_vendor end)/nullif(count(distinct u.id_for_vendor),0)*100 as paid_cvr,
    count(distinct case when s.id_for_vendor is not null and revenue_so_far > 0 and sol_sub is true then u.id_for_vendor end)/nullif(count(distinct u.id_for_vendor),0)*100 as paid_sol_cvr,
    count(distinct case when s.id_for_vendor is not null and revenue_so_far > 0 and sol_sub is false then u.id_for_vendor end)/nullif(count(distinct u.id_for_vendor),0)*100 as paid_non_sol_cvr,
    count(distinct case when s.id_for_vendor is not null and had_trial and is_in_trial_period is false and revenue_so_far > 0 then u.id_for_vendor end)/nullif(count(distinct case when s.id_for_vendor is not null and had_trial and is_in_trial_period is false then u.id_for_vendor end),0)*100 as trial_to_paid_cvr,
    
    count(distinct case when s.id_for_vendor is not null and subscription_duration = '1y' then u.id_for_vendor end)/nullif(count(distinct case when s.id_for_vendor is not null then u.id_for_vendor end),0)*100 as pct_yearly_subs,
    count(distinct case when s.id_for_vendor is not null and subscription_duration = '1m' then u.id_for_vendor end)/nullif(count(distinct case when s.id_for_vendor is not null then u.id_for_vendor end),0)*100 as pct_monthly_subs,
    count(distinct case when s.id_for_vendor is not null and subscription_duration = 'l' then u.id_for_vendor end)/nullif(count(distinct case when s.id_for_vendor is not null then u.id_for_vendor end),0)*100 as pct_otp_subs,
    
    count(distinct case when s.id_for_vendor is not null and subscription_cancellation_date is not null then u.id_for_vendor end)/nullif(count(distinct case when s.id_for_vendor is not null then u.id_for_vendor end),0)*100 as cancellation_rate,
    count(distinct case when s.id_for_vendor is not null and subscription_cancellation_date is not null and revenue_so_far > 0 then u.id_for_vendor end)/nullif(count(distinct case when s.id_for_vendor is not null and revenue_so_far > 0 then u.id_for_vendor end),0)*100 as paid_cancellation_rate,
    count(distinct case when s.id_for_vendor is not null and subscription_duration = '1y' and subscription_cancellation_date is not null and revenue_so_far > 0 then u.id_for_vendor end)/nullif(count(distinct case when s.id_for_vendor is not null and subscription_duration = '1y' and revenue_so_far > 0 then u.id_for_vendor end),0)*100 as paid_yearly_cancellation_rate,
    count(distinct case when s.id_for_vendor is not null and subscription_duration = '1m' and subscription_cancellation_date is not null and revenue_so_far > 0 then u.id_for_vendor end)/nullif(count(distinct case when s.id_for_vendor is not null and subscription_duration = '1m' and revenue_so_far > 0 then u.id_for_vendor end),0)*100 as paid_monthly_cancellation_rate,
    
    count(distinct case when e.id_for_vendor is not null then u.id_for_vendor end)/nullif(count(distinct u.id_for_vendor),0)*100 as pct_exporters,
    sum(num_exports)/nullif(count(distinct u.id_for_vendor),0) as exports_per_device,
    
    count(distinct case when s.id_for_vendor is not null then u.id_for_vendor end) as num_subscribers,
    count(distinct case when s.id_for_vendor is not null and revenue_so_far > 0 then u.id_for_vendor end) as num_paid_subscribers,
    count(distinct case when s.id_for_vendor is not null and had_trial and is_in_trial_period is true then u.id_for_vendor end) num_still_in_trial,
    count(distinct case when s.id_for_vendor is not null and had_trial and is_in_trial_period is false then u.id_for_vendor end) num_finished_trial,
    
        -- day0, week0, week1 retention
    count(distinct case when r.is_day1_retained is true then u.id_for_vendor end)/nullif(count(distinct u.id_for_vendor),0)*100 as pct_retained_day1,
    count(distinct case when r.is_week0_retained is true then u.id_for_vendor end)/nullif(count(distinct u.id_for_vendor),0)*100 as pct_retained_week0,
    count(distinct case when r.is_week1_retained is true then u.id_for_vendor end)/nullif(count(distinct u.id_for_vendor),0)*100 as pct_retained_week1,
from users u
join subs s
    on s.id_for_vendor = u.id_for_vendor
    and s.segmentation = u.segmentation
    and s.variant = u.variant
left join exports e
    on e.id_for_vendor = u.id_for_vendor
    and e.segmentation = u.segmentation
    and e.variant = u.variant
left join retention r
    on r.id_for_vendor = u.id_for_vendor
where true
group by 1,2,3
order by 1,2,3