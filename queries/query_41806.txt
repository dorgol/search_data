/*
    Name: TEST VL iOS - Interest Based Funnel V3 - Stats by User Type
    Query ID: 41806
    Created By: Joseph Rouncefield
    Last Updated At: 2023-05-12T09:03:48.295Z
    */
    with user_types as (
    select distinct
        id_for_vendor,
        segmentation,
        case when variant like '%Baseline' then 'Baseline'
                     when variant like '%Variant1' then 'Variant1'
                     when variant like '%Variant2' then 'Variant2' end as variant,
        experiment_started_device,
        experiment_started_meta,
        experiment
    from `ltx-dwh-prod-processed`.`ab_test`.`raw_final_devices_and_variant`
    where true
        and application = "videoleap"
        and lower(experiment) like lower('vl_smb_feed_categories_3_2023')
        and case when '{{segments}}' = 'All Users' then segmentation = '01 All Users' 
                 when '{{segments}}' = 'New Users' then segmentation = '02 New Users' 
                 when '{{segments}}' = 'Existing Users' then segmentation = '03 Existing Users' 
                 when '{{segments}}' = 'All Users Without Existing Segmentation' then segmentation in ('01 All Users','02 New Users','03 Existing Users' )
                 else true end
) 
    
, totals as (
    select
        variant,
        segmentation,
        count(distinct id_for_vendor) as total_users,
        count (distinct case when timestamp_diff(current_timestamp (), experiment_started_meta,day) > 0  then id_for_vendor else null end ) as num_devices_day0
    from user_types
    group by 1,2)

, remake_exports as (
    select
        u.variant,
        u.segmentation,
        count(distinct ex.id_for_vendor) as exporters,
        count(distinct ex.export_id) as exports,
        count(distinct case when exs.parent_template_id is not null then ex.id_for_vendor end) as remakes_exporters,
        count(distinct case when exs.parent_template_id is null then ex.id_for_vendor end) as originals_exporters,
        count(distinct case when exs.parent_template_id is not null then ex.export_id end) as remake_exports,
        count(distinct case when exs.parent_template_id is null then ex.export_id end) as original_exports,
    from user_types as u
    join `ltx-dwh-prod-raw`.`analytics`.`ios_videoleap_media_export_started` as exs
        on u.id_for_vendor = exs.id_for_vendor
        and u.experiment_started_device < exs.device_timestamp
    join `ltx-dwh-prod-raw`.`analytics`.`ios_videoleap_media_exported` as ex
        on exs.export_id = ex.export_id
    group by 1,2
)

, template_purchases as (
    select
        u.variant,
        u.segmentation,
        count(distinct ex.platform_device_id) as template_purchasers,
    from user_types as u
    join `ltx-dwh-prod-raw`.`analytics_global`.`ltx_global_app_feed_user_action_started` as exs
        on u.id_for_vendor = exs.platform_device_id
        and u.experiment_started_device < exs.device_timestamp
        and action in ("purchase_template")
        and exs.meta_source = 'videoleap' and exs.meta_platform = 'ios'
    join `ltx-dwh-prod-raw`.`analytics_global`.`ltx_global_app_feed_user_action_ended` as ex
        on exs.action_id = ex.action_id
        and reason = 'succeeded'
    group by 1,2
)

, subs as (
    select
       u.variant,
       u.segmentation,
       
       count(distinct case when s.subscription.product_category = 'subscription' then s.lt_subscription_id end) as num_subs,
       
       count(distinct case when s.subscription.product_category = 'subscription' and s.payments.revenue_so_far > 0 then s.lt_subscription_id else null end) as num_paid_subs,
       
       count(distinct case when timestamp_diff(s.original_purchase_date,u.experiment_started_meta,day)<=0  and timestamp_diff(current_timestamp(),u.experiment_started_meta,day) > 0
            then s.lt_subscription_id else null end) as num_subs_day0,

            
       count(distinct case when timestamp_diff(s.original_purchase_date,u.experiment_started_meta,day)<=0 and timestamp_diff(current_timestamp(),u.experiment_started_meta,day) > 0
              and s.payments.revenue_so_far > 0 then s.lt_subscription_id else null end) as num_paid_subs_day0
    from user_types as u
    --join `ltx-dwh-prod-processed`.`ab_test`.`raw_final_devices_otid_variant` v
    --    on v.id_for_vendor = u.id_for_vendor
    --    and v.experiment = u.experiment
    --join `ltx-dwh-prod-processed`.`subscriptions`.`unified_transactions` t
    --    on v.lt_subscription_id = t.lt_subscription_id
    --    and t.purchase_date <= current_timestamp()
    --left join `ltx-dwh-prod-processed`.`subscriptions`.`unified_subscriptions` s
    --    on v.lt_subscription_id = s.lt_subscription_id
    
    join `ltx-dwh-prod-processed`.`subscriptions`.`unified_subscriptions` s
        on u.id_for_vendor = s.device.platform_device_id
        and s.license_applications = 'videoleap'
        and original_purchase_date >= experiment_started_meta
        
    group by 1,2
        )
        
, revs as (
    select
       u.variant,
       u.segmentation,
       
       sum(s.payments.revenue_so_far) as revs,
      
    from user_types as u

    --join `ltx-dwh-prod-processed`.`ab_test`.`raw_final_devices_otid_variant` v
    --    on v.id_for_vendor = u.id_for_vendor
    --    and v.experiment = u.experiment
    --    and v.segmentation = u.segmentation
    --join `ltx-dwh-prod-processed`.`subscriptions`.`unified_subscriptions` s
    --    on v.lt_subscription_id = s.lt_subscription_id
        
    join `ltx-dwh-prod-processed`.`subscriptions`.`unified_subscriptions` s
        on u.id_for_vendor = s.device.platform_device_id
        and s.license_applications = 'videoleap'
        and original_purchase_date >= experiment_started_meta
        
    group by 1,2
        )

select
    t.variant,
    t.segmentation,
    
    total_users,
    
    exporters,
    remakes_exporters,
    originals_exporters,
    
    exports,
    remake_exports,
    original_exports,
    
    template_purchasers,
    
    safe_divide(exporters, total_users)*100 as exporter_pct,
    safe_divide(remakes_exporters, total_users)*100 as remake_exporter_pct,
    safe_divide(originals_exporters, total_users)*100 as og_exporter_pct,
    
    safe_divide(template_purchasers, total_users)*100 as purchase_pct,
    
    safe_divide(exports, total_users) as exports_per_user,
    safe_divide(remake_exports, total_users) as remake_exports_per_user,
    safe_divide(original_exports, total_users) as og_exports_per_user,
    
    num_subs,
    num_paid_subs,
    
    safe_divide(num_subs, total_users)*100 as cvr,
    safe_divide(num_paid_subs, total_users)*100 as paid_cvr,
    
    num_devices_day0,
    num_subs_day0,
    num_paid_subs_day0,
    
    safe_divide(num_subs_day0, num_devices_day0)*100 as day0_cvr,
    safe_divide(num_paid_subs_day0, num_devices_day0)*100 as day0_paid_cvr,
    
    revs,
    safe_divide(revs, total_users) as rpd
    
from totals t
left join remake_exports rex
    on rex.variant = t.variant
    and rex.segmentation = t.segmentation
left join template_purchases pu
    on pu.variant = t.variant
    and pu.segmentation = t.segmentation
left join subs s
    on s.variant = t.variant
    and s.segmentation = t.segmentation
left join revs r
    on r.variant = t.variant
    and r.segmentation = t.segmentation

