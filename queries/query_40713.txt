/*
    Name: Paid Templates pricing experiment - Payments to creators by variant
    Query ID: 40713
    Created By: Rachel HaCohen
    Last Updated At: 2023-03-29T15:00:50.931Z
    */
    -- -- only splits out consumable transactions atm - need to split out paid templates using product_id
-- -- actual product_id should be 'com.lightricks.EnlightVideo_C_V1.TA_Videoleap.FeedTemplate.1'

with experiment_users as (
    select distinct
        id_for_vendor,
        variant,
        device_timestamp as experiment_started_device
        -- experiment_started_device
    -- from `ltx-dwh-prod-processed`.`ab_test`.`raw_final_devices_and_variant`
    from `ltx-dwh-prod-raw`.`analytics`.`ios_videoleap_assignment_state_changed`
    where true
        -- and application = "videoleap"
        and experiment = "vl_selling_templates_pricing_1_2023"
) 

, purchases as(
        select distinct
            -- variant,
            sd.id_for_vendor,
            split(r.consumable_id, '.')[offset(4)] original_post_id,
            t.transaction.transaction_id,
            t.payments.actual_proceeds
        from `ltx-dwh-prod-processed`.`subscriptions`.`unified_transactions` t
        left join  `ltx-dwh-prod-processed.subscriptions.ios_subscriptions_devices` as sd
            on sd.original_transaction_id = t.transaction.transaction_id
        left join `ltx-dwh-prod-processed`.`subscriptions`.`redeemed_coins` as r
            on cast(r.transaction_id as string) = t.transaction.transaction_id
        left join experiment_users as ex
            on ex.id_for_vendor = sd.id_for_vendor
            and purchase_date > experiment_started_device
        where true
            and date_trunc(date(purchase_date), day) >= "2023-02-14"
            and date_trunc(date(purchase_date), day) < "2023-02-28"
            -- and purchase_date < timestamp_sub(current_timestamp(), interval 24 hour)
            and t.subscription.product_sub_category = "template"
            and t.vertical = "Videoleap"
            and variant in ({{include variants}})
)

, creators_accounts as (
    select
        post_id,
        account_id
    from `ltx-dwh-prod-raw`.`analytics`.`backend_feed_post_create` as be
    qualify (row_number() over (partition by post_id order by server_timestamp desc) = 1)
)

, purchases_per_template as (
    select distinct
        original_post_id,
        account_id,
        count(distinct transaction_id) as num_transactions,
        sum(actual_proceeds) as net_revenues
    from purchases as p
    left join creators_accounts as a
        on a.post_id = p.original_post_id
    group by 1,2
)

, accounts as (
    select distinct
        r.lt_id,
        r.account_id
    from `ltx-dwh-prod-raw`.`analytics_global`.`ltx_global_app_feed_user_registered` as r
    join purchases_per_template as p
        on p.account_id = r.account_id
    where date(meta_received_at) >= date_sub(current_date, interval 3 month)
    qualify (row_number() over (partition by account_id order by meta_received_at desc) = 1)
)

, names as (
    select distinct 
        n.lt_id,
        n.value as name,
        a.account_id
    from `ltx-dwh-prod-raw`.`analytics_global`.`ltx_global_app_feed_profile_features` as n
    join accounts as a
        on n.lt_id = a.lt_id
    where lower(action) in ("add", "replace")
        and feature = "username"
    qualify (row_number() over (partition by lt_id order by meta_received_at desc) = 1)
)

, purchases_per_creator as (
    select
        p.account_id,
        n.name,
        case when p.account_id in ("bec04c27-f000-4975-86e0-bf3527aed041",
                                    "66e995df-9c23-4533-a783-9bdd0f64a2a5",
                                    "911b44a0-a88e-4c9c-8604-a0ea15b318c2",
                                    "574591ce-96a2-4b95-88a1-23c39d6d54e9",
                                    "0e6a85dc-1ba2-43c7-9c1d-dd39c93738d4",
                                    "196a7772-fb29-4326-8271-02f3cf9f0431",
                                    "8f5478b6-539e-4bf7-8d0d-96da6174d599",
                                    "6c265a4c-f8f8-446d-91d1-cefab69f7469",
                                    "9c873679-95db-4f96-94db-3df80c52fb02",
                                    "c69e5be4-015a-42ed-be41-f2504dc7e620",
                                    "5555e72e-d6db-4ab1-9404-e8f815fee762",
                                    "4a4efac6-5fbf-4475-b876-a0c9f609bd0a",
                                    "dff125a0-5347-40e1-b3ac-043a3fa7ab0c",
                                    "525d373d-44d6-4502-93e4-4c88ca335836",
                                    "2c98c781-8cf6-4c14-8579-d8e35a8440ad",
                                    "cb5d4368-5b26-45c0-b762-182d930e4e74",
                                    "190ad8bd-a02b-43a7-bb2e-cf2f8fd51beb",
                                    "5a311bd3-df82-40ba-8747-744a64798951",
                                    "9b1a0db0-dd5e-403d-9a23-9aeea01efefb",
                                    "35d4bd26-e371-4fee-a489-557f3825f708") then "paid UGC" else "unpaid" end as user_type,
        sum(p.num_transactions) as total_purchases,
        sum(p.net_revenues) as total_net_revenues
    from purchases_per_template as p
    left join names as n
        on n.account_id = p.account_id
    group by 1,2,3
)

select distinct
    account_id,
    name,
    user_type,
    total_purchases,
    total_net_revenues,
    total_net_revenues / total_purchases as avg_template_price,
    total_net_revenues * 0.4 as pay_to_creator,
    sum(total_net_revenues * 0.4) over () as total_payments_to_creators
from purchases_per_creator
-- where user_type = "paid UGC"
order by pay_to_creator desc
limit 30