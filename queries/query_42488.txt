/*
    Name: FT iOS - Avatar Asset Users - High Level Metrics
    Query ID: 42488
    Created By: Josh Seidman
    Last Updated At: 2023-06-06T07:14:18.421Z
    */
    with
user_genders as (
    select
        *
    from (
        select
            platform_device_id as id_for_vendor,
            case 
                when contains_substr(asset_gender,'|') then 'couple'
                else asset_gender
            end as asset_gender,
            sum(distinct num_processes)/max(total_processes)*100 pct_total_processes
        from (
            select
                *,
                sum(num_processes) over (partition by platform_device_id) total_processes
            from (
                select
                    fs.platform_device_id,
                    case 
                        when split(json_extract_scalar(process_details, '$.appContextId'), '_')[safe_offset(1)] = 'couple' and split(json_extract_scalar(process_details, '$.appContextId'), '_')[safe_offset(2)] is not null
                            then split(json_extract_scalar(process_details, '$.appContextId'), '_')[safe_offset(2)] || ' | ' || split(json_extract_scalar(process_details, '$.appContextId'), '_')[safe_offset(3)]
                        else split(json_extract_scalar(process_details, '$.appContextId'), '_')[safe_offset(2)]
                    end as asset_gender,
                    count(distinct process_id) num_processes
                from `ltx-dwh-prod-raw`.`analytics_global`.`ltx_global_feature_started` fs
                join `ltx-dwh-prod-raw`.`analytics_global`.`ltx_global_feature_process_ended` pe
                    on pe.app_name = 'facetune2'
                    and pe.process_name like '%ai_a%'
                    and pe.process_id = fs.source
                where fs.app_name = 'facetune2'
                and fs.feature_name like '%ai_a%'
                group by 1,2
                having asset_gender is not null
            )
        )
        -- where total_processes >= 4
        group by 1,2
    )
    where pct_total_processes > 50
),
subs as (
    select
        u.id_for_vendor,
        s.revenue_so_far,
        is_sol as sol_sub,
        subscription_source,
        first_subscription_duration as subscription_duration,
        first_known_cancellation_date,
        current_is_in_trial_period as is_in_trial_period,
        had_trial
    from user_genders u 
    join `ltx-dwh-prod-processed`.`agg`.`subscriptions` s
        on true
        and app_name = 'facetune2'
        and u.id_for_vendor = s.platform_device_id
        and date(original_purchase_date) >= date_sub(current_date(), interval 1 month)
),

exports as (
    select
        u.id_for_vendor,
        count(distinct e.event_id) as num_exports,
    from user_genders u 
    join `ltx-dwh-prod-processed`.`devices`.`unified_app_export` e
        on true
        and e.application = 'facetune2'
        and u.id_for_vendor = e.id_for_vendor
        and date(meta_received_at) >= date_sub(current_date(), interval 1 month)
    group by 1
)

select 
    asset_gender,
    count(distinct u.id_for_vendor) as num_devices,
    sum(revenue_so_far) revs,
    sum(revenue_so_far)/nullif(count(distinct u.id_for_vendor),0) as revenue_per_device_new_subs,
    
    count(distinct case when s.id_for_vendor is not null then u.id_for_vendor end)/nullif(count(distinct u.id_for_vendor),0)*100 as cvr,
    count(distinct case when s.id_for_vendor is not null and sol_sub is true then u.id_for_vendor end)/nullif(count(distinct u.id_for_vendor),0)*100 as sol_cvr,
    count(distinct case when s.id_for_vendor is not null and sol_sub is false then u.id_for_vendor end)/nullif(count(distinct u.id_for_vendor),0)*100 as non_sol_cvr,
    
    count(distinct case when s.id_for_vendor is not null and revenue_so_far > 0 then u.id_for_vendor end)/nullif(count(distinct u.id_for_vendor),0)*100 as paid_cvr,
    count(distinct case when s.id_for_vendor is not null and revenue_so_far > 0 and sol_sub is true then u.id_for_vendor end)/nullif(count(distinct u.id_for_vendor),0)*100 as paid_sol_cvr,
    count(distinct case when s.id_for_vendor is not null and revenue_so_far > 0 and sol_sub is false then u.id_for_vendor end)/nullif(count(distinct u.id_for_vendor),0)*100 as paid_non_sol_cvr,
    count(distinct case when s.id_for_vendor is not null and had_trial and is_in_trial_period is false and revenue_so_far > 0 then u.id_for_vendor end)/nullif(count(distinct case when s.id_for_vendor is not null and had_trial and is_in_trial_period is false then u.id_for_vendor end),0)*100 as trial_to_paid_cvr,
    
    count(distinct case when s.id_for_vendor is not null and subscription_duration = '1y' then u.id_for_vendor end)/nullif(count(distinct case when s.id_for_vendor is not null then u.id_for_vendor end),0)*100 as pct_yearly_subs,
    count(distinct case when s.id_for_vendor is not null and subscription_duration = '1m' then u.id_for_vendor end)/nullif(count(distinct case when s.id_for_vendor is not null then u.id_for_vendor end),0)*100 as pct_monthly_subs,
    count(distinct case when s.id_for_vendor is not null and subscription_duration = 'l' then u.id_for_vendor end)/nullif(count(distinct case when s.id_for_vendor is not null then u.id_for_vendor end),0)*100 as pct_otp_subs,
    
    count(distinct case when s.id_for_vendor is not null and first_known_cancellation_date is not null then u.id_for_vendor end)/nullif(count(distinct case when s.id_for_vendor is not null then u.id_for_vendor end),0)*100 as cancellation_rate,
    count(distinct case when s.id_for_vendor is not null and first_known_cancellation_date is not null and revenue_so_far > 0 then u.id_for_vendor end)/nullif(count(distinct case when s.id_for_vendor is not null and revenue_so_far > 0 then u.id_for_vendor end),0)*100 as paid_cancellation_rate,
    count(distinct case when s.id_for_vendor is not null and subscription_duration = '1y' and first_known_cancellation_date is not null and revenue_so_far > 0 then u.id_for_vendor end)/nullif(count(distinct case when s.id_for_vendor is not null and subscription_duration = '1y' and revenue_so_far > 0 then u.id_for_vendor end),0)*100 as paid_yearly_cancellation_rate,
    count(distinct case when s.id_for_vendor is not null and subscription_duration = '1m' and first_known_cancellation_date is not null and revenue_so_far > 0 then u.id_for_vendor end)/nullif(count(distinct case when s.id_for_vendor is not null and subscription_duration = '1m' and revenue_so_far > 0 then u.id_for_vendor end),0)*100 as paid_monthly_cancellation_rate,
    
    count(distinct case when e.id_for_vendor is not null then u.id_for_vendor end)/nullif(count(distinct u.id_for_vendor),0)*100 as pct_exporters,
    sum(num_exports)/nullif(count(distinct u.id_for_vendor),0) as exports_per_device,
    
    count(distinct case when s.id_for_vendor is not null then u.id_for_vendor end) as num_subscribers,
    count(distinct case when s.id_for_vendor is not null and revenue_so_far > 0 then u.id_for_vendor end) as num_paid_subscribers,
    count(distinct case when s.id_for_vendor is not null and had_trial and is_in_trial_period is true then u.id_for_vendor end) num_still_in_trial,
    count(distinct case when s.id_for_vendor is not null and had_trial and is_in_trial_period is false then u.id_for_vendor end) num_finished_trial,
from user_genders u
left join exports e
    on e.id_for_vendor = u.id_for_vendor
left join subs s
    on s.id_for_vendor = u.id_for_vendor
where true
and asset_gender not in ('50', '100','200')
group by 1